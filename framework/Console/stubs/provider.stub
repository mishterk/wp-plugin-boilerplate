<?php


namespace PdkPluginBoilerplate\Providers;


use PdkPluginBoilerplate\Framework\Container\Application;
use PdkPluginBoilerplate\Framework\Providers\ServiceProviderBase;


class DummyClass extends ServiceProviderBase {


	/**
	 * Register container bindings. Avoid initialising anything here as it is better to wait for the container to
	 * receive all bindings before doing so.
	 *
     * @param Application $app
     */
    public function register( Application $app ) {

        //$app->bind('key', function( $app ){
        //    return new SomeClass($app->make('some_dependency'));
        //});

    }


    /**
     * Run any early boot code here.
     *
     * If your application is extending the \PdkPluginBoilerplate\Framework\Container\Plugin class, this method is
     * called on WordPress' `plugins_loaded` action.
     *
     * If your application is extending the \PdkPluginBoilerplate\Framework\Container\Theme class, this method is
     * called on WordPress' `after_setup_theme` action.
     */
    //public function boot() {
    //
    //    //$this->app->make( 'key' )->init();
    //
    //}


    /**
     * Run any initialisation code here. This method is called on WordPress' `init` action.
     */
    //public function init() {
    //
    //    //$this->app->make( 'key' )->init();
    //
    //}


}